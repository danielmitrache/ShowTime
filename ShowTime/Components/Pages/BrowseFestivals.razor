@page "/browsefestivals"
@using ShowTime.Repositories.Interfaces
@rendermode InteractiveServer
@inject IRepositoryFestival RepositoryFestival

@inject NavigationManager NavigationManager

<PageTitle>Browse Festivals</PageTitle>
<Div>
	<h1 id="heading" class="mb-5 text-color-purplegradient">Browse Festivals</h1>
    <Div Class="d-flex flex-column gap-3">
        @foreach (var festival in availableFestivals.Select((festival, index) => new { festival, index }))
        {
            @if(festival.index >= currentFestivalIndexes.First() && festival.index <= currentFestivalIndexes.Last())
            {
                <Card TextColor="TextColor.Primary" Class="custom-translucent-card-1">
                    <CardHeader>
                        <Div Class="d-flex flex-row gap-5">
                            <h1 class="f-roboto festival-name-class">@festival.festival.Name</h1>
                        </Div>
                    </CardHeader>
                    <CardBody>
                        <Div Class="mb-3 d-flex flex-column gap-0">
                            <Div Class="d-flex flex-row gap-3">
                                <Icon Class="m-1" Name="IconName.Users"></Icon>
                                <h5 class="f-roboto festival-name-class fs-5">Line-up:</h5>
						    </Div>
                            <p class="f-roboto fs-4 m-0 p-0 festival-name-class">
                                @(
                                   festival.festival.FestivalBands != null && festival.festival.FestivalBands.Any()
                                   ? string.Join(" · ", festival.festival.FestivalBands.Select(fb => fb.Band.Name))
                                   : "To be announced!"
                                  )</p>
                        </Div>
                        <Div Class="mt-3">
                            <Button Color="Color.Primary" Clicked="@(() => navigatoToFestivalDetails(festival.festival))" Outline Class="custom-browsefestival-buttons">
                                Show more
                            </Button>
                        </Div>
                    </CardBody>
                </Card>
            }
        }
        <Pagination TextColor="TextColor.Primary">
            <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
                <PaginationLink>
                    <span aria-hidden="true">«</span>
                </PaginationLink>
            </PaginationItem>
            @{
                for (var i = 1; i <= pageItems; i++)
                {
                    var pageNumberAsString = i.ToString();
                    <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                        <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                            @pageNumberAsString
                        </PaginationLink>
                    </PaginationItem>
                }
            }
            <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
                <PaginationLink>
                    <span aria-hidden="true">»</span>
                </PaginationLink>
            </PaginationItem>
        </Pagination>
    </Div>
</Div>

<footer>
	<br />
	<br />
	<br />
</footer>

@code {
    private List<Festival> availableFestivals = new();
    private int pageItems = 1;
    private int itemsPerPage = 3;
    private List<int> currentFestivalIndexes = new List<int>{ 0, 1, 2 };

    protected override async Task OnInitializedAsync()
    {
        availableFestivals = (await RepositoryFestival.GetAllWithBandsAsync()).ToList();
        pageItems = availableFestivals.Count() / itemsPerPage + 1;
    }

    private void navigatoToFestivalDetails(Festival festival)
    {
        NavigationManager.NavigateTo($"browsefestivals/festival-details/{festival.Id}");
    }


    //* PAGINATION *//
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "1";

    private bool IsActive(string page)
        => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
            currentFestivalIndexes = getCurrentPageFestivalIndexes(int.Parse(currentPage));
        }
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (currentPageAsInt + 1).ToString();
            currentFestivalIndexes = getCurrentPageFestivalIndexes(int.Parse(currentPage));
        }
    }

    private void SetActive(string page)
    {
        currentPage = page;
        currentFestivalIndexes = getCurrentPageFestivalIndexes(int.Parse(currentPage));
    }

    private List<int> getCurrentPageFestivalIndexes(int page)
    {
        var startIndex = (page - 1) * itemsPerPage;
        var endIndex = Math.Min(startIndex + itemsPerPage, availableFestivals.Count);
		return Enumerable.Range(startIndex, endIndex - startIndex).ToList();
    }
}
