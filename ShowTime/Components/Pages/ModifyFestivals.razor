@page "/festivals/modify"
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Modify Festivals</PageTitle>

<Div Class="d-flex flex-column gap-3">
	<Card>
		<CardHeader>
			<h2>Add a new festival</h2>
		</CardHeader>
		<CardBody>
			<Container TextColor="TextColor.Primary">
				<Field>
					<Label Class="fs-5 text-dark">Festival name:</Label>
					<TextEdit @bind-Text="festival.Name" Placeholder="Festival name" />
				</Field>

				<Field>
					<Label Class="fs-5 text-dark">Festival description:</Label>
					<TextEdit @bind-Text="festival.Description" Placeholder="Festival description" />
				</Field>

				<Field>
					<Label Class="fs-5 text-dark">Festival location:</Label>
					<TextEdit @bind-Text="festival.Location" Placeholder="Festival location" />
				</Field>

				<Field>
					<Label Class="fs-5 text-dark">Festival days:</Label>
					<DatePicker TValue="DateTime?" @bind-Dates="selectedDates" InputMode="DateInputMode.Date" SelectionMode="DateInputSelectionMode.Range" Inline />
				</Field>

				<Field>
					<Label Class="fs-5 text-dark">Ticket price:</Label>
					<NumericPicker TValue="decimal" CurrencySymbol="€" @bind-Value="ticketPrice" />
				</Field>

				<Field>
					<Label Class="fs-5 text-dark">Bands playing:</Label>
					<Autocomplete TItem="ShowTime.Entities.Band"
								  TValue="Guid"
								  Data="@availableBands"
								  TextField="@(b => b.Name)"
								  ValueField="@(b => b.Id)"
								  Placeholder="Search..."
								  SelectionMode="AutocompleteSelectionMode.Multiple"
								  FreeTyping
								  MinLength="0"
								  OpenOnFocus="true"
								  CloseOnSelection="false"
								  @bind-SelectedValues="selectedBandIds"
								  @bind-SelectedTexts="selectedBandNames">
					</Autocomplete>

				</Field>

				<Button Color="Color.Success" Clicked="Submit">Add Festival</Button>
			</Container>
		</CardBody>
	</Card>

	<Card>
		<CardHeader>
			<h2>List of festivals</h2>
		</CardHeader>
		<CardBody>

			<Table>
				<thead>
					<tr>
						<th>Name</th>
						<th>Description</th>
						<th>Location</th>
						<th>Start Date</th>
						<th>End Date</th>
						<th>Ticket Price</th>
						<th>Bands Playing</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					@foreach (Festival festival in festivals)
					{
						<tr>
							<td>@festival.Name</td>
							<td>@festival.Description</td>
							<td>@festival.Location</td>
							<td>@festival.StartDate</td>
							<td>@festival.EndDate</td>
							<td>@festival.TicketPrice</td>
							<td>
								@(
									festival.FestivalBands?.Any() != null
									? string.Join(" | ", festival.FestivalBands.OrderBy(b => b.Day).ThenBy(b => b.Order).Select(b => b.Band.Name))
									: "(none)"
								)
							</td>
							<td>
								<Button Color="Color.Danger" Text="Delete" Clicked="@(() => DeleteFestivalAction(festival))">Remove</Button>
								<Button Color="Color.Warning" Text="Edit" Clicked="@(() => EditFestivalAction(festival))">Edit</Button>
								<Button Color="Color.Warning" Clicked="@(() => ModifyBandsOrderAction(festival))">Modify bands order</Button>
							</td>
						</tr>
					}
				</tbody>
			</Table>
		</CardBody>
	</Card>

		<Modal @bind-Visible="triggerEditPopup" Background="Background.Light" >

			<ModalHeader><h1>Edit</h1></ModalHeader>

			<ModalBody Centered>
			<Container TextColor="TextColor.Primary">
				<Div Class="d-flex flex-row gap-3">

					<Field>
						<Label Class="fs-5 text-dark">Festival name:</Label>
						<TextEdit @bind-Text="festivalToBeEdited.Name" Placeholder="Festival name" />
					</Field>

					<Field>
						<Label Class="fs-5 text-dark">Festival description:</Label>
						<TextEdit @bind-Text="festivalToBeEdited.Description" Placeholder="Festival description" />
					</Field>
				</Div>

				<Div Class="d-flex flex-row gap-3">

				<Field>
					<Label Class="fs-5 text-dark">Festival location:</Label>
					<TextEdit @bind-Text="festivalToBeEdited.Location" Placeholder="Festival location" />
				</Field>

				<Field>
					<Label Class="fs-5 text-dark">Start date:</Label>
					<DatePicker TValue="DateTime" @bind-Date="festivalToBeEdited.StartDate" Inline />
				</Field>

					<Field>
						<Label Class="fs-5 text-dark">End date:</Label>
						<DatePicker TValue="DateTime" @bind-Date="festivalToBeEdited.EndDate" Inline />
					</Field>

				</Div>

				<Field>
					<Label Class="fs-5 text-dark">Ticket price:</Label>
					<NumericPicker TValue="decimal" CurrencySymbol="€" @bind-Value="ticketPrice" />
				</Field>

				<Field>
					<Label Class="fs-5 text-dark">Bands playing:</Label>
					<Autocomplete TItem="ShowTime.Entities.Band"
					TValue="Guid"
					Data="@availableBands"
					TextField="@(b => b.Name)"
					ValueField="@(b => b.Id)"
					Placeholder="Search..."
					SelectionMode="AutocompleteSelectionMode.Multiple"
					FreeTyping
					MinLength="0"
					OpenOnFocus="true"
					CloseOnSelection="false"
					@bind-SelectedValues="festivalToBeEditedSelectedBandIds"
					@bind-SelectedTexts="festivalToBeEditedSelectedBandNames">
					</Autocomplete>
				</Field>
			</Container>
			</ModalBody>

			<ModalFooter>
			<Div Class="d-flex flex-row gap-2">
				<Button Color="Color.Success" Text="Save" Clicked="@(() => SaveEdit(festivalToBeEdited))">Save</Button>
				<Button Color="Color.Danger" Text="Close" Clicked="@(() => { triggerEditPopup = false; })">Close</Button>
			</Div>
			</ModalFooter>
		</Modal>

	

	@if (triggerModifyOrderPopup)
	{
		<Modal @bind-Visible="triggerModifyOrderPopup" Background="Background.Light" >
			<ModalHeader>
			<h1>Modify band order for @festivalToBeEdited.Name</h1>
			</ModalHeader>
			<ModalBody>
		<DropContainer TItem="DropBand"
					   Items="@dropBands"
					   ItemsFilter="@( (item, zone) => (item.Day ?? 1) == int.Parse(zone) )"
					   ItemDropped="OnItemDropped"
					   Flex="Flex.Wrap.Grow.Is1">

				<ChildContent>
					@for (int d = 0; d <= festivalToBeEdited.EndDate.Day - festivalToBeEdited.StartDate.Day + 1; d++)
					{
						var zone = d.ToString();

						<DropZone TItem="DropBand"
								  Name="@zone"
								  AllowReorder
								  Reordered="OnReorder"
								  Padding="Padding.Is3"
								  Margin="Margin.Is3"
								  Flex="Flex.Grow.Is1">

							<Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">
								@if(zone != "0")
								{
									<span>Ziua @zone</span>
								}
							</Heading>
						</DropZone>
					}
				</ChildContent>

				<ItemTemplate>
					<Card Shadow="Shadow.Default" Margin="Margin.Is3.OnY">
						<CardBody>
							@context.Band.Name
						</CardBody>
					</Card>
				</ItemTemplate>
			</DropContainer>
			</ModalBody>

			<ModalFooter>
			<Div Class="d-flex flex-row gap-2">
				<Button Color="Color.Success" Text="Save" Clicked="@(() => SaveBandOrder(festivalToBeEdited, dropBands))">Save</Button>
				<Button Color="Color.Danger" Text="Close" Clicked="@(() => { triggerModifyOrderPopup = false; })">Close</Button>
			</Div>
			</ModalFooter>
		</Modal>
	}

</Div>

<footer>
	<br />
	<br />
</footer>

@code {
	[Inject]
	private IRepositoryFestival RepositoryFestival { get; set; }
	[Inject]
	private IRepositoryBand RepositoryBand { get; set; }

	private decimal ticketPrice = 0;

	private List<ShowTime.Entities.Festival> festivals = new List<Festival>();
	private List<Band> availableBands = new List<Band>();
	private List<FestivalBand> availableFestivalBands = new List<FestivalBand>();
	IReadOnlyList<DateTime?> selectedDates;
	protected override async Task OnInitializedAsync()
	{
		festivals = (await RepositoryFestival.GetAllWithBandsAsync()).ToList();

		availableBands = (await RepositoryBand.GetAllAsync()).ToList();
	}

	private List<Guid> selectedBandIds = new(); 
	private List<string> selectedBandNames = new();

	public Festival festival { get; set; } = new Festival()
	{
		Name = string.Empty,
		StartDate = DateTime.Today,
		EndDate = DateTime.Today,
		Description = string.Empty,
		Location = string.Empty
	};

	private async Task Submit()
	{
		if (String.IsNullOrWhiteSpace(festival.Name))
		{
			return;
		}

		try
		{

			if (string.IsNullOrWhiteSpace(festival.Name)) return;

			festival.Id = Guid.NewGuid();
			festival.StartDate = selectedDates.FirstOrDefault() ?? DateTime.Today;
			festival.EndDate = selectedDates.LastOrDefault() ?? DateTime.Today;
			var uniqueSelectedBandIds = new HashSet<Guid>(selectedBandIds);
			festival.TicketPrice = (double)ticketPrice;

			festival.FestivalBands = uniqueSelectedBandIds
				.Select((bandId, idx) => new FestivalBand
				{
					FestivalId = festival.Id,
					BandId = bandId,
 				})
				.ToList();

			await RepositoryFestival.AddAsync(festival);
			await RepositoryFestival.SaveChangeAsync();
			festivals = (await RepositoryFestival.GetAllWithBandsAsync()).ToList();

			selectedBandIds.Clear();
			selectedBandNames.Clear();
			selectedDates = new List<DateTime?> { DateTime.Today, DateTime.Today };
			festival = new Festival
			{
				Name = string.Empty,
				StartDate = DateTime.Today,
				EndDate = DateTime.Today,
				Description = string.Empty,
				Location = string.Empty
			};
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error adding band: {ex.Message}");
		}
	}

	private async Task DeleteFestivalAction(Festival festival)
	{
		try
		{
			RepositoryFestival.Delete(festival);
			await RepositoryFestival.SaveChangeAsync();
			festivals = (await RepositoryFestival.GetAllWithBandsAsync()).ToList();
		}
		catch (Exception e)
		{
			Console.WriteLine($"Error deleting festival: {e.Message}");
		}
	}




	private bool triggerEditPopup = false;
	private Festival festivalToBeEdited = new Festival();
	private List<Guid> festivalToBeEditedSelectedBandIds = new();
	private List<string> festivalToBeEditedSelectedBandNames = new();
	private List<FestivalBand> festivalToBeEditedFestivalBands = new();
	private async Task EditFestivalAction(Festival festival)
	{
		festivalToBeEdited = new Festival
		{
			Id = festival.Id,
			Name = festival.Name,
			Description = festival.Description,
			Location = festival.Location,
			StartDate = festival.StartDate,
			EndDate = festival.EndDate,
		};
		festivalToBeEditedSelectedBandIds = festival.FestivalBands?.Select(fb => fb.Band.Id).ToList() ?? new List<Guid>();
		festivalToBeEditedSelectedBandNames = festival.FestivalBands?.Select(fb => fb.Band.Name).ToList() ?? new List<string>();
		ticketPrice = festival.TicketPrice != null ? (decimal)festival.TicketPrice : 0;

		festivalToBeEditedFestivalBands = festival.FestivalBands?.ToList() ?? new List<FestivalBand>();

		triggerEditPopup = true;
	}

	private async Task SaveEdit(Festival festival)
	{
		try
		{
			var original = await RepositoryFestival.GetByIdAsync(festivalToBeEdited.Id);
			if (original is null)
				throw new Exception("Festival not found");
			original.Name = festivalToBeEdited.Name;
			original.Description = festivalToBeEdited.Description;
			original.Location = festivalToBeEdited.Location;
			original.StartDate = festivalToBeEdited.StartDate;
			original.EndDate = festivalToBeEdited.EndDate;


			original.TicketPrice = (double)ticketPrice;

			original.FestivalBands.Clear();
			foreach(var febsi in festivalToBeEditedSelectedBandIds)
			{
				bool found = false;
				foreach(var fefb in festivalToBeEditedFestivalBands)
				{
					if(fefb.BandId == febsi)
					{
						found = true;
						original.FestivalBands.Add(new FestivalBand
						{
							FestivalId = original.Id,
							BandId = fefb.BandId,
							Day = fefb.Day,
							Order = fefb.Order
						});
					}
				}
				if(!found)
				{
					original.FestivalBands.Add(new FestivalBand
					{
						FestivalId = original.Id,
						BandId = febsi,
					});
				}
			}

			// original.FestivalBands = festivalToBeEditedSelectedBandIds
			// 	.Select((bandId, idx) => new FestivalBand
			// 	{
			// 		FestivalId = original.Id,
			// 		BandId = bandId,
			// 	})
			// 	.ToList();

			await RepositoryFestival.SaveChangeAsync();
			festivals = (await RepositoryFestival.GetAllWithBandsAsync()).ToList();
			triggerEditPopup = false;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error saving festival: {ex.Message}");
		}
	}

	private bool triggerModifyOrderPopup = false;

	public class DropBand
	{
		public Band Band { get; set; } = default!;
		public int? Day { get; set; } = 1;
		public int? Order { get; set; }
	}

	// ► Lista bind-uită la DropContainer
	private List<DropBand> dropBands = new();

	// Populezi când deschizi editorul:
	void LoadBandsForEdit()
	{
		dropBands = festivalToBeEdited.FestivalBands
			.OrderBy(fb => fb.Day ?? 0)
			.ThenBy(fb => fb.Order ?? 0)
			.Select(fb => new DropBand
			{
				Band = fb.Band,
				Day = fb.Day >= 1 && fb.Day <= (festivalToBeEdited.EndDate.Day - festivalToBeEdited.StartDate.Day + 1) ? fb.Day : 0,
				Order = fb.Order ?? 0
			})
			.ToList();
	}

	private async Task ModifyBandsOrderAction(Festival festival)
	{

		festivalToBeEdited = await RepositoryFestival
			.GetByIdWithBandsAsync(festival.Id);

		LoadBandsForEdit();

		triggerModifyOrderPopup = true;

	}

	Task OnItemDropped(DraggableDroppedEventArgs<DropBand> e)
	{
		e.Item.Day = int.Parse(e.DropZoneName);
		e.Item.Order = e.IndexInZone;
		return Task.CompletedTask;
	}

	private Task OnReorder(DropZoneOrder<DropBand> order)
	{
		foreach (var item in order.OrderedItems)
			item.Item.Order = item.Order;

		return Task.CompletedTask;
	}

	private async Task SaveBandOrder(Festival festival, List<DropBand> bandOrder)
	{
		festival.FestivalBands = bandOrder
			.Select(dB => new FestivalBand
			{
				FestivalId = festival.Id,
				BandId = dB.Band.Id,
				Day = dB.Day,
				Order = dB.Order
			})
			.ToList();

		await RepositoryFestival.SaveChangeAsync();
		festivals = (await RepositoryFestival.GetAllWithBandsAsync()).ToList();
		triggerModifyOrderPopup = false;
	}
}