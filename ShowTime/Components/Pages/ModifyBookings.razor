@page "/bookings/modify"
@rendermode InteractiveServer
@inject IRepositoryBooking RepositoryBooking
@inject IRepositoryFestival RepositoryFestival

<PageTitle>Modify Bands</PageTitle>

<AuthorizeView Roles="Admin">

	<Authorized>
		<Div Class="d-flex flex-column gap-3">
			<Card>
				<CardHeader>
					<h2>Add a new booking</h2>
				</CardHeader>
				<CardBody>
					<Container TextColor="TextColor.Primary">
						<Field>
							<Label Class="fs-5 text-dark">Booking email:</Label>
							<TextEdit @bind-Text="bookingToBeAdded.Email" Placeholder="Booking email" />
						</Field>
						<Field>
							<Label Class="fs-5 text-dark">Date:</Label>
							<DatePicker TValue="DateTime" @bind-Date="bookingToBeAdded.Date" Inline />
						</Field>
						<Field>
							<Label Class="fs-5 text-dark">Booking price:</Label>
							<NumericPicker TValue="decimal" CurrencySymbol="€" @bind-Value="priceForBookingToBeAdded" />
						</Field>
						<Field>
							<Label Class="fs-5 text-dark">Festival booked:</Label>
							<Autocomplete TItem="Festival"
										  TValue="Guid"
										  Data="@availableFestivals"
										  TextField="@(( item ) => item.Name.ToString())"
										  ValueField="@(( item ) => item.Id)"
										  @bind-SelectedValue="@bookingToBeAdded.FestivalId"
										  Placeholder="Search..."
										  Filter="AutocompleteFilter.Contains"
										  MinLength="0"
										  OpenOnFocus="true"
										  FreeTyping>
							</Autocomplete>
						</Field>

						<Button Color="Color.Success" Clicked="AddBooking">Add Booking</Button>
					</Container>
				</CardBody>
			</Card>

			<Card>
				<CardHeader>
					<h2>List of bookings</h2>
				</CardHeader>
				<CardBody>

					<Table>
						<thead>
							<tr>
								<th>Email</th>
								<th>Date</th>
								<th>Price</th>
								<th>Festival</th>
								<th>Action</th>
							</tr>
						</thead>
						<tbody>
							@foreach (Booking booking in bookings)
							{
								<tr>
									<td>@booking.Email</td>
									<td>@booking.Date.ToShortDateString()</td>
									<td>@booking.Price</td>
									<td>
										@availableFestivals.FirstOrDefault(f => f.Id == booking.FestivalId)?.Name
									</td>
									<td>
										<Button Color="Color.Danger" Text="Delete" Clicked="@(() => DeleteBookingAction(booking))">Remove</Button>
										<Button Color="Color.Warning" Text="Edit" Clicked="@(() => EditBookingAction(booking))">Edit</Button>
									</td>
								</tr>
							}
						</tbody>
					</Table>

				</CardBody>
			</Card>

			@if (triggerEditPopup)
			{
				<Div Class="popover popover-body" style="position: fixed;
																top: 5vh;
																left: 50%;
																transform: translateX(-50%);
																z-index: 1000;">
					<h3>Edit booking</h3>

					<Container TextColor="TextColor.Primary">
						<Field>
							<Label Class="fs-5 text-dark">Booking email:</Label>
							<TextEdit @bind-Text="bookingToBeEdited.Email" Placeholder="Booking email" />
						</Field>
						<Field>
							<Label Class="fs-5 text-dark">Date:</Label>
							<DatePicker TValue="DateTime" @bind-Date="bookingToBeEdited.Date" />
						</Field>
						<Field>
							<Label Class="fs-5 text-dark">Booking price:</Label>
							<NumericPicker TValue="decimal" CurrencySymbol="€" @bind-Value="priceForBookingToBeEdited" />
						</Field>
						<Field>
							<Label Class="fs-5 text-dark">Festival booked:</Label>
							<Autocomplete TItem="Festival"
										  TValue="Guid"
										  Data="@availableFestivals"
										  TextField="@(( item ) => item.Name.ToString())"
										  ValueField="@(( item ) => item.Id)"
										  @bind-SelectedValue="@bookingToBeEdited.FestivalId"
										  Placeholder="Search..."
										  Filter="AutocompleteFilter.Contains"
										  MinLength="0"
										  OpenOnFocus="true"
										  FreeTyping>
							</Autocomplete>
						</Field>
					</Container>

					<Div Class="d-flex flex-row gap-2">
						<Button Color="Color.Success" Text="Save" Clicked="@(() => SaveEdit(bookingToBeEdited))">Save</Button>
						<Button Color="Color.Danger" Text="Close" Clicked="@(() => { triggerEditPopup = false; })">Close</Button>
					</Div>
				</Div>
			}

		</Div>

		<footer>
			<br />
			<br />
		</footer>
	</Authorized>
	<NotAuthorized>
		<h1>Access denied.</h1>
	</NotAuthorized>

</AuthorizeView>

@code {
	private List<Booking> bookings = new List<Booking>();
	private List<Festival> availableFestivals = new List<Festival>();
	protected override async Task OnInitializedAsync()
	{
		bookings = (await RepositoryBooking.GetAllAsync()).ToList();
		availableFestivals = (await RepositoryFestival.GetAllWithBandsAsync()).ToList();
	}


	private Booking bookingToBeAdded = new Booking()
	{
		Date = DateTime.Now,
		Email = string.Empty,
		FestivalId = Guid.Empty,
		Price = 0
	};
	private decimal priceForBookingToBeAdded = 0;
	private async Task AddBooking()
	{
		bookingToBeAdded.Price = (double)priceForBookingToBeAdded;
		await RepositoryBooking.AddAsync(bookingToBeAdded);
		await RepositoryBooking.SaveChangeAsync();
		bookings = (await RepositoryBooking.GetAllAsync()).ToList();
		bookingToBeAdded = new Booking()
		{
			Date = DateTime.Now,
			Email = string.Empty,
			FestivalId = Guid.Empty,
			Price = 0
		};
		priceForBookingToBeAdded = 0;
	}

	private async Task DeleteBookingAction(Booking booking)
	{
		RepositoryBooking.Delete(booking);
		await RepositoryBooking.SaveChangeAsync();
		bookings = (await RepositoryBooking.GetAllAsync()).ToList();
	}

	private bool triggerEditPopup = false;
	private Booking bookingToBeEdited = new Booking();
	private decimal priceForBookingToBeEdited = 0;
	private async Task EditBookingAction(Booking booking)
	{
		bookingToBeEdited.Id = booking.Id;
		bookingToBeEdited.Email = booking.Email;
		bookingToBeEdited.Price = booking.Price;
		bookingToBeEdited.Date = booking.Date;
		bookingToBeEdited.FestivalId = booking.FestivalId;
		priceForBookingToBeEdited = (decimal)booking.Price;
		triggerEditPopup = true;
	}

	private async Task SaveEdit(Booking booking)
	{
		try
		{
			var original = await RepositoryBooking.GetByIdAsync(bookingToBeEdited.Id);
			if (original is null)
				throw new Exception("Booking not found");
			original.Email = bookingToBeEdited.Email;
			original.Date = bookingToBeEdited.Date;
			original.FestivalId = bookingToBeEdited.FestivalId;
			original.Price = (double)priceForBookingToBeEdited;
			await RepositoryFestival.SaveChangeAsync();
			bookings = (await RepositoryBooking.GetAllAsync()).ToList();
			triggerEditPopup = false;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error saving festival: {ex.Message}");
		}
	}
}
