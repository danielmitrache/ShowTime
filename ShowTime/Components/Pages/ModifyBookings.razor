@page "/bookings/modify"
@rendermode InteractiveServer
@inject IRepositoryBooking RepositoryBooking
@inject IRepositoryFestival RepositoryFestival

<PageTitle>Modify Bands</PageTitle>

<Div Class="d-flex flex-column gap-3">
	<Card>
		<CardHeader>
			<h2>Add a new booking</h2>
		</CardHeader>
		<CardBody>
			<Container TextColor="TextColor.Primary">
				<Field>
					<Label Class="fs-5 text-dark">Booking email:</Label>
					<TextEdit @bind-Text="bookingToBeAdded.Email" Placeholder="Booking email" />
				</Field>
				<Field>
					<Label Class="fs-5 text-dark">Date:</Label>
					<DatePicker TValue="DateTime" @bind-Date="bookingToBeAdded.Date" Inline />
				</Field>
				<Field>
					<Label Class="fs-5 text-dark">Booking price:</Label>
					<NumericPicker TValue="decimal" CurrencySymbol="€" @bind-Value="priceForBookingToBeAdded" />
				</Field>
				<Field>
					<Label Class="fs-5 text-dark">Festival booked:</Label>
					<Autocomplete TItem="Festival"
								  TValue="Guid"
								  Data="@availableFestivals"
								  TextField="@(( item ) => item.Name.ToString())"
								  ValueField="@(( item ) => item.Id)"
								  @bind-SelectedValue="@bookingToBeAdded.FestivalId"
								  Placeholder="Search..."
								  Filter="AutocompleteFilter.Contains"
								  MinLength="0"
								  OpenOnFocus="true"
								  FreeTyping>
					</Autocomplete>
				</Field>

				<Button Color="Color.Success" Clicked="AddBooking">Add Band</Button>
			</Container>
		</CardBody>
	</Card>

	<Card>
		<CardHeader>
			<h2>List of bookings</h2>
		</CardHeader>
		<CardBody>

			<Table>
				<thead>
					<tr>
						<th>Email</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					@foreach (Booking booking in bookings)
					{
						<tr>
							<td>@booking.Email</td>
							<td>
								<Button Color="Color.Danger" Text="Delete" Clicked="@(() => DeleteBookingAction(booking))">Remove</Button>
								<Button Color="Color.Warning" Text="Edit" Clicked="@(() => EditBookingAction(booking))">Edit</Button>
							</td>
						</tr>
					}
				</tbody>
			</Table>

		</CardBody>
	</Card>

</Div>

@code {
	private List<Booking> bookings = new List<Booking>();
	private List<Festival> availableFestivals = new List<Festival>();
	protected override async Task OnInitializedAsync()
	{
		bookings = (await RepositoryBooking.GetAllAsync()).ToList();
		availableFestivals = (await RepositoryFestival.GetAllWithBandsAsync()).ToList();
	}


	private Booking bookingToBeAdded = new Booking()
	{
		Date = DateTime.Now,
		Email = string.Empty,
		FestivalId = Guid.Empty,
		Price = 0
	};
	private decimal priceForBookingToBeAdded = 0;
	private async Task AddBooking()
	{
		bookingToBeAdded.Price = (double)priceForBookingToBeAdded;
		await RepositoryBooking.AddAsync(bookingToBeAdded);
		await RepositoryBooking.SaveChangeAsync();
		bookings = (await RepositoryBooking.GetAllAsync()).ToList();
		bookingToBeAdded = new Booking()
		{
			Date = DateTime.Now,
			Email = string.Empty,
			FestivalId = Guid.Empty,
			Price = 0
		};
		priceForBookingToBeAdded = 0;
	}

	private async Task DeleteBookingAction(Booking booking)
	{

	}

	private async Task EditBookingAction(Booking booking)
	{
		
	}
}
