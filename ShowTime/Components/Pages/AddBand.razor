@page "/bands/add"  
@rendermode InteractiveServer 

<PageTitle>Add Band</PageTitle>

<h1>You can add bands here</h1>


<Container TextColor="TextColor.Primary">
	<Field>
		<Label Class="fs-5 text-dark">Band name:</Label>
		<TextEdit @bind-Text="band.Name" Placeholder="Band name" />
	</Field>

				@* <Field>
					<Label Class="fs-5 text-dark">Genre:</Label>
					<Select TValue="Genre" @bind-SelectedValue="band.Genre">
						@foreach (Genre genre in Enum.GetValues(typeof(Genre)))
						{
							<SelectItem Value="@genre">@genre</SelectItem>
						}
					</Select>
				</Field> *@
	<Field>
		<Label Class="fs-5 text-dark">Genre:</Label>
		<Autocomplete TItem="Genre"
					  TValue="Genre"
					  Data="@genres"
					  TextField="@(( item ) => item.ToString())"
					  ValueField="@(( item ) => item)"
					  @bind-SelectedValue="@band.Genre"
					  Placeholder="Search..."
					  Filter="AutocompleteFilter.Contains"
					  FreeTyping>
		</Autocomplete>
	</Field>

	<Button Color="Color.Primary" Text Clicked="Submit">Submit</Button>
</Container>


@code {
	public IEnumerable<Genre> genres => Enum.GetValues(typeof(Genre)).Cast<Genre>();

	[Inject]  
	private IRepositoryBand RepositoryBand { get; set; }  

	public Band band { get; set; } = new Band()
	{
		Name = string.Empty,
		Genre = 0,
	};

	private async Task Submit()  
	{  
		if(String.IsNullOrWhiteSpace(band.Name))
		{
			return;
		}

		try
		{
			await RepositoryBand.AddAsync(band);
			await RepositoryBand.SaveChangeAsync();

			band = new Band() { Name = "", Genre = 0 };
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error adding band: {ex.Message}");
		}

		// Redirect to the band list page  
		NavigationManager.NavigateTo("/bands");  
	}  

	[Inject]  
	private NavigationManager NavigationManager { get; set; }  
}
